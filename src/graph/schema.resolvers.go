package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"com.wuchuheng.copilot-server/src/graph/model"
	"context"
	"fmt"
	"sync"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, input model.NotificationInput) (*model.Notification, error) {
	// create a new notification.
	notification := &model.Notification{
		ID:    nextNotificationID,
		Title: input.Title,
		Body:  input.Body,
	}

	// increment the next notification ID.
	nextNotificationID++

	// append the new notification to the list of notifications.
	notifications = append(notifications, notification)

	// notify all the notification channels.
	go func() {
		err := notificationsSubscriptions.notify(notification)
		if err != nil {
			fmt.Printf("Error notifying notification channels: %v\n", err)
		}
	}()

	// return the new notification.
	return notification, nil
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context) ([]*model.Notification, error) {
	// return the empty list of notifications.
	return notifications, nil
}

// Notification is the resolver for the notification field.
func (r *subscriptionResolver) Notification(ctx context.Context) (<-chan *model.Notification, error) {
	// create a new notification channel.
	notificationChannel := make(chan *model.Notification, 1)

	// add the new notification channel to the list of channels.
	chanelId, err := notificationsSubscriptions.add(notificationChannel)
	if err == nil {
		go func() {
			// if the context is done, remove the notification channel from the list of channels.
			<-ctx.Done()
			err := notificationsSubscriptions.remove(chanelId)
			if err != nil {
				fmt.Printf("Error removing notification channel: %v\n", err)
			}
		}()
		return notificationChannel, nil
	} else {
		return nil, err
	}
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *subscriptionResolver) NotificationCreated(ctx context.Context) (<-chan *model.Notification, error) {
	panic(fmt.Errorf("not implemented: NotificationCreated - notificationCreated"))
}

var nextNotificationID = 1
var notifications = []*model.Notification{}
var notificationsSubscriptions = &NotificationsSubscriptions{
	channels: make(map[int]chan *model.Notification),
	mu:       &sync.Mutex{},
	nextId:   1,
}

type NotificationsSubscriptions struct {
	channels map[int]chan *model.Notification
	mu       *sync.Mutex
	nextId   int
}

func (n *NotificationsSubscriptions) add(notificationChanel chan *model.Notification) (int, error) {
	n.mu.Lock()
	defer n.mu.Unlock()
	id := n.nextId
	n.channels[id] = notificationChanel
	n.nextId++

	return id, nil
}
func (n *NotificationsSubscriptions) remove(id int) error {
	n.mu.Lock()
	defer n.mu.Unlock()
	delete(n.channels, id)

	return nil
}
func (n *NotificationsSubscriptions) notify(notification *model.Notification) error {
	n.mu.Lock()
	defer n.mu.Unlock()
	for _, ch := range n.channels {
		ch <- notification
	}

	return nil
}
